//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.6
//
// <auto-generated>
//
// Generated from file `LaserMulti.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __LaserMulti_h__
#define __LaserMulti_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <Ice/ExceptionHelpers.h>
#include <GenericBase.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 6
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace RoboCompLaserMulti
{

class LaserMulti;
class LaserMultiPrx;

}

namespace RoboCompLaserMulti
{

using shortVector = ::std::vector<int>;

struct LaserConfData
{
    ::std::string driver;
    ::std::string device;
    int staticConf;
    int maxMeasures;
    int maxDegrees;
    int maxRange;
    int minRange;
    int iniRange;
    int endRange;
    int cluster;
    int sampleRate;
    float angleRes;
    float angleIni;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&, const ::std::string&, const int&, const int&, const int&, const int&, const int&, const int&, const int&, const int&, const int&, const float&, const float&> ice_tuple() const
    {
        return std::tie(driver, device, staticConf, maxMeasures, maxDegrees, maxRange, minRange, iniRange, endRange, cluster, sampleRate, angleRes, angleIni);
    }
};

struct TData
{
    float angle;
    float dist;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const float&, const float&> ice_tuple() const
    {
        return std::tie(angle, dist);
    }
};

using TLaserData = ::std::vector<TData>;

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace RoboCompLaserMulti
{

class LaserMulti : public virtual ::Ice::Object
{
public:

    using ProxyType = LaserMultiPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual LaserConfData getLaserConfData(int robotid, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getLaserConfData(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual TLaserData getLaserData(int robotid, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getLaserData(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace RoboCompLaserMulti
{

class LaserMultiPrx : public virtual ::Ice::Proxy<LaserMultiPrx, ::Ice::ObjectPrx>
{
public:

    LaserConfData getLaserConfData(int robotid, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::RoboCompLaserMulti::LaserConfData>(true, this, &LaserMultiPrx::_iceI_getLaserConfData, robotid, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getLaserConfDataAsync(int robotid, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompLaserMulti::LaserConfData>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompLaserMulti::LaserConfData, P>(false, this, &LaserMultiPrx::_iceI_getLaserConfData, robotid, context);
    }

    ::std::function<void()>
    getLaserConfDataAsync(int robotid,
                          ::std::function<void(::RoboCompLaserMulti::LaserConfData)> response,
                          ::std::function<void(::std::exception_ptr)> ex = nullptr,
                          ::std::function<void(bool)> sent = nullptr,
                          const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::RoboCompLaserMulti::LaserConfData>(std::move(response), std::move(ex), std::move(sent), this, &RoboCompLaserMulti::LaserMultiPrx::_iceI_getLaserConfData, robotid, context);
    }

    /// \cond INTERNAL
    void _iceI_getLaserConfData(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompLaserMulti::LaserConfData>>&, int, const ::Ice::Context&);
    /// \endcond

    TLaserData getLaserData(int robotid, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::RoboCompLaserMulti::TLaserData>(true, this, &LaserMultiPrx::_iceI_getLaserData, robotid, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getLaserDataAsync(int robotid, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompLaserMulti::TLaserData>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompLaserMulti::TLaserData, P>(false, this, &LaserMultiPrx::_iceI_getLaserData, robotid, context);
    }

    ::std::function<void()>
    getLaserDataAsync(int robotid,
                      ::std::function<void(::RoboCompLaserMulti::TLaserData)> response,
                      ::std::function<void(::std::exception_ptr)> ex = nullptr,
                      ::std::function<void(bool)> sent = nullptr,
                      const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::RoboCompLaserMulti::TLaserData>(std::move(response), std::move(ex), std::move(sent), this, &RoboCompLaserMulti::LaserMultiPrx::_iceI_getLaserData, robotid, context);
    }

    /// \cond INTERNAL
    void _iceI_getLaserData(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompLaserMulti::TLaserData>>&, int, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    LaserMultiPrx() = default;
    friend ::std::shared_ptr<LaserMultiPrx> IceInternal::createProxy<LaserMultiPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits<::RoboCompLaserMulti::LaserConfData>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 46;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::RoboCompLaserMulti::LaserConfData, S>
{
    static void read(S* istr, ::RoboCompLaserMulti::LaserConfData& v)
    {
        istr->readAll(v.driver, v.device, v.staticConf, v.maxMeasures, v.maxDegrees, v.maxRange, v.minRange, v.iniRange, v.endRange, v.cluster, v.sampleRate, v.angleRes, v.angleIni);
    }
};

template<>
struct StreamableTraits<::RoboCompLaserMulti::TData>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 8;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamReader<::RoboCompLaserMulti::TData, S>
{
    static void read(S* istr, ::RoboCompLaserMulti::TData& v)
    {
        istr->readAll(v.angle, v.dist);
    }
};

}
/// \endcond

/// \cond INTERNAL
namespace RoboCompLaserMulti
{

using LaserMultiPtr = ::std::shared_ptr<LaserMulti>;
using LaserMultiPrxPtr = ::std::shared_ptr<LaserMultiPrx>;

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

namespace RoboCompLaserMulti
{

class LaserMulti;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< LaserMulti>&);
::IceProxy::Ice::Object* upCast(LaserMulti*);
/// \endcond

}

}

namespace RoboCompLaserMulti
{

class LaserMulti;
/// \cond INTERNAL
::Ice::Object* upCast(LaserMulti*);
/// \endcond
typedef ::IceInternal::Handle< LaserMulti> LaserMultiPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RoboCompLaserMulti::LaserMulti> LaserMultiPrx;
typedef LaserMultiPrx LaserMultiPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(LaserMultiPtr&, const ::Ice::ObjectPtr&);
/// \endcond

}

namespace RoboCompLaserMulti
{

typedef ::std::vector< ::Ice::Int> shortVector;

struct LaserConfData
{
    ::std::string driver;
    ::std::string device;
    ::Ice::Int staticConf;
    ::Ice::Int maxMeasures;
    ::Ice::Int maxDegrees;
    ::Ice::Int maxRange;
    ::Ice::Int minRange;
    ::Ice::Int iniRange;
    ::Ice::Int endRange;
    ::Ice::Int cluster;
    ::Ice::Int sampleRate;
    ::Ice::Float angleRes;
    ::Ice::Float angleIni;
};

struct TData
{
    ::Ice::Float angle;
    ::Ice::Float dist;
};

typedef ::std::vector<TData> TLaserData;

}

namespace RoboCompLaserMulti
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompLaserMulti::LaserMulti::begin_getLaserConfData.
 * Create a wrapper instance by calling ::RoboCompLaserMulti::newCallback_LaserMulti_getLaserConfData.
 */
class Callback_LaserMulti_getLaserConfData_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_LaserMulti_getLaserConfData_Base> Callback_LaserMulti_getLaserConfDataPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompLaserMulti::LaserMulti::begin_getLaserData.
 * Create a wrapper instance by calling ::RoboCompLaserMulti::newCallback_LaserMulti_getLaserData.
 */
class Callback_LaserMulti_getLaserData_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_LaserMulti_getLaserData_Base> Callback_LaserMulti_getLaserDataPtr;

}

namespace IceProxy
{

namespace RoboCompLaserMulti
{

class LaserMulti : public virtual ::Ice::Proxy<LaserMulti, ::IceProxy::Ice::Object>
{
public:

    ::RoboCompLaserMulti::LaserConfData getLaserConfData(::Ice::Int robotid, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getLaserConfData(_iceI_begin_getLaserConfData(robotid, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getLaserConfData(::Ice::Int robotid, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getLaserConfData(robotid, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getLaserConfData(::Ice::Int robotid, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getLaserConfData(robotid, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getLaserConfData(::Ice::Int robotid, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getLaserConfData(robotid, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getLaserConfData(::Ice::Int robotid, const ::RoboCompLaserMulti::Callback_LaserMulti_getLaserConfDataPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getLaserConfData(robotid, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getLaserConfData(::Ice::Int robotid, const ::Ice::Context& context, const ::RoboCompLaserMulti::Callback_LaserMulti_getLaserConfDataPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getLaserConfData(robotid, context, cb, cookie);
    }

    ::RoboCompLaserMulti::LaserConfData end_getLaserConfData(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getLaserConfData(::Ice::Int, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::RoboCompLaserMulti::TLaserData getLaserData(::Ice::Int robotid, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getLaserData(_iceI_begin_getLaserData(robotid, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getLaserData(::Ice::Int robotid, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getLaserData(robotid, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getLaserData(::Ice::Int robotid, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getLaserData(robotid, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getLaserData(::Ice::Int robotid, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getLaserData(robotid, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getLaserData(::Ice::Int robotid, const ::RoboCompLaserMulti::Callback_LaserMulti_getLaserDataPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getLaserData(robotid, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getLaserData(::Ice::Int robotid, const ::Ice::Context& context, const ::RoboCompLaserMulti::Callback_LaserMulti_getLaserDataPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getLaserData(robotid, context, cb, cookie);
    }

    ::RoboCompLaserMulti::TLaserData end_getLaserData(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getLaserData(::Ice::Int, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

namespace RoboCompLaserMulti
{

class LaserMulti : public virtual ::Ice::Object
{
public:

    typedef LaserMultiPrx ProxyType;
    typedef LaserMultiPtr PointerType;

    virtual ~LaserMulti();

#ifdef ICE_CPP11_COMPILER
    LaserMulti() = default;
    LaserMulti(const LaserMulti&) = default;
    LaserMulti& operator=(const LaserMulti&) = default;
#endif

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual LaserConfData getLaserConfData(::Ice::Int robotid, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getLaserConfData(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual TLaserData getLaserData(::Ice::Int robotid, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getLaserData(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const LaserMulti& lhs, const LaserMulti& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const LaserMulti& lhs, const LaserMulti& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::RoboCompLaserMulti::LaserConfData>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 46;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::RoboCompLaserMulti::LaserConfData, S>
{
    static void write(S* ostr, const ::RoboCompLaserMulti::LaserConfData& v)
    {
        ostr->write(v.driver);
        ostr->write(v.device);
        ostr->write(v.staticConf);
        ostr->write(v.maxMeasures);
        ostr->write(v.maxDegrees);
        ostr->write(v.maxRange);
        ostr->write(v.minRange);
        ostr->write(v.iniRange);
        ostr->write(v.endRange);
        ostr->write(v.cluster);
        ostr->write(v.sampleRate);
        ostr->write(v.angleRes);
        ostr->write(v.angleIni);
    }
};

template<typename S>
struct StreamReader< ::RoboCompLaserMulti::LaserConfData, S>
{
    static void read(S* istr, ::RoboCompLaserMulti::LaserConfData& v)
    {
        istr->read(v.driver);
        istr->read(v.device);
        istr->read(v.staticConf);
        istr->read(v.maxMeasures);
        istr->read(v.maxDegrees);
        istr->read(v.maxRange);
        istr->read(v.minRange);
        istr->read(v.iniRange);
        istr->read(v.endRange);
        istr->read(v.cluster);
        istr->read(v.sampleRate);
        istr->read(v.angleRes);
        istr->read(v.angleIni);
    }
};

template<>
struct StreamableTraits< ::RoboCompLaserMulti::TData>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 8;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamWriter< ::RoboCompLaserMulti::TData, S>
{
    static void write(S* ostr, const ::RoboCompLaserMulti::TData& v)
    {
        ostr->write(v.angle);
        ostr->write(v.dist);
    }
};

template<typename S>
struct StreamReader< ::RoboCompLaserMulti::TData, S>
{
    static void read(S* istr, ::RoboCompLaserMulti::TData& v)
    {
        istr->read(v.angle);
        istr->read(v.dist);
    }
};

}
/// \endcond

namespace RoboCompLaserMulti
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompLaserMulti::LaserMulti::begin_getLaserConfData.
 * Create a wrapper instance by calling ::RoboCompLaserMulti::newCallback_LaserMulti_getLaserConfData.
 */
template<class T>
class CallbackNC_LaserMulti_getLaserConfData : public Callback_LaserMulti_getLaserConfData_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const LaserConfData&);

    CallbackNC_LaserMulti_getLaserConfData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        LaserMultiPrx proxy = LaserMultiPrx::uncheckedCast(result->getProxy());
        LaserConfData ret;
        try
        {
            ret = proxy->end_getLaserConfData(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompLaserMulti::LaserMulti::begin_getLaserConfData.
 */
template<class T> Callback_LaserMulti_getLaserConfDataPtr
newCallback_LaserMulti_getLaserConfData(const IceUtil::Handle<T>& instance, void (T::*cb)(const LaserConfData&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LaserMulti_getLaserConfData<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompLaserMulti::LaserMulti::begin_getLaserConfData.
 */
template<class T> Callback_LaserMulti_getLaserConfDataPtr
newCallback_LaserMulti_getLaserConfData(T* instance, void (T::*cb)(const LaserConfData&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LaserMulti_getLaserConfData<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompLaserMulti::LaserMulti::begin_getLaserConfData.
 * Create a wrapper instance by calling ::RoboCompLaserMulti::newCallback_LaserMulti_getLaserConfData.
 */
template<class T, typename CT>
class Callback_LaserMulti_getLaserConfData : public Callback_LaserMulti_getLaserConfData_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const LaserConfData&, const CT&);

    Callback_LaserMulti_getLaserConfData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        LaserMultiPrx proxy = LaserMultiPrx::uncheckedCast(result->getProxy());
        LaserConfData ret;
        try
        {
            ret = proxy->end_getLaserConfData(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompLaserMulti::LaserMulti::begin_getLaserConfData.
 */
template<class T, typename CT> Callback_LaserMulti_getLaserConfDataPtr
newCallback_LaserMulti_getLaserConfData(const IceUtil::Handle<T>& instance, void (T::*cb)(const LaserConfData&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LaserMulti_getLaserConfData<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompLaserMulti::LaserMulti::begin_getLaserConfData.
 */
template<class T, typename CT> Callback_LaserMulti_getLaserConfDataPtr
newCallback_LaserMulti_getLaserConfData(T* instance, void (T::*cb)(const LaserConfData&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LaserMulti_getLaserConfData<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompLaserMulti::LaserMulti::begin_getLaserData.
 * Create a wrapper instance by calling ::RoboCompLaserMulti::newCallback_LaserMulti_getLaserData.
 */
template<class T>
class CallbackNC_LaserMulti_getLaserData : public Callback_LaserMulti_getLaserData_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const TLaserData&);

    CallbackNC_LaserMulti_getLaserData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        LaserMultiPrx proxy = LaserMultiPrx::uncheckedCast(result->getProxy());
        TLaserData ret;
        try
        {
            ret = proxy->end_getLaserData(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompLaserMulti::LaserMulti::begin_getLaserData.
 */
template<class T> Callback_LaserMulti_getLaserDataPtr
newCallback_LaserMulti_getLaserData(const IceUtil::Handle<T>& instance, void (T::*cb)(const TLaserData&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LaserMulti_getLaserData<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompLaserMulti::LaserMulti::begin_getLaserData.
 */
template<class T> Callback_LaserMulti_getLaserDataPtr
newCallback_LaserMulti_getLaserData(T* instance, void (T::*cb)(const TLaserData&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_LaserMulti_getLaserData<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompLaserMulti::LaserMulti::begin_getLaserData.
 * Create a wrapper instance by calling ::RoboCompLaserMulti::newCallback_LaserMulti_getLaserData.
 */
template<class T, typename CT>
class Callback_LaserMulti_getLaserData : public Callback_LaserMulti_getLaserData_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const TLaserData&, const CT&);

    Callback_LaserMulti_getLaserData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        LaserMultiPrx proxy = LaserMultiPrx::uncheckedCast(result->getProxy());
        TLaserData ret;
        try
        {
            ret = proxy->end_getLaserData(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompLaserMulti::LaserMulti::begin_getLaserData.
 */
template<class T, typename CT> Callback_LaserMulti_getLaserDataPtr
newCallback_LaserMulti_getLaserData(const IceUtil::Handle<T>& instance, void (T::*cb)(const TLaserData&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LaserMulti_getLaserData<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompLaserMulti::LaserMulti::begin_getLaserData.
 */
template<class T, typename CT> Callback_LaserMulti_getLaserDataPtr
newCallback_LaserMulti_getLaserData(T* instance, void (T::*cb)(const TLaserData&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_LaserMulti_getLaserData<T, CT>(instance, cb, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
